#include<bits/stdc++.h>
using namespace std;

const int MAX = 501, CASE = 19, BLOCK_COUNT = 4;
int n, m, ret;
int mp[MAX][MAX];
/*
1. = = = = : 세로, 가로 2가지 상태

2. = =
   = =     : 1가지 상태

3. =
   =
   = =     : 8가지 상태

4. =
   = =
     =     : 4가지 상태 

5. = = =
     =     : 4가지 상태

모두 19가지 상태
상태별로 완전 탐색하여 최댓값 찾기
*/
pair<int, int> coordi[CASE][BLOCK_COUNT] = {
    {{0, 0}, {0, 1}, {0, 2}, {0, 3}}, // 막대1
    {{0, 0}, {1, 0}, {2, 0}, {3, 0}}, // 막대2

    {{0, 0}, {1, 0}, {1, 1}, {0, 1}}, // 네모

    {{0, 0}, {1, 0}, {2, 0}, {2, 1}}, // 니은1
    {{0, 0}, {1, 0}, {2, 0}, {2, -1}}, // 니은2
    {{0, 0}, {0, 1}, {1, 0}, {2, 0}}, // 니은3
    {{0, 0}, {0, 1}, {1, 1}, {2, 1}}, // 니은4

    {{0, 0}, {1, 0}, {1, 1}, {1, 2}}, // 니은5
    {{0, 0}, {0, 1}, {0, 2}, {-1, 2}}, // 니은5
    {{0, 0}, {0, 1}, {0, 2}, {1, 0}}, // 니은5
    {{0, 0}, {0, 1}, {0, 2}, {1, 2}}, // 니은5

    {{0, 0}, {1, 0}, {1, 1}, {2, 1}}, // 지그재그1
    {{0, 0}, {0, 1}, {1, 0}, {1, -1}}, // 지그재그2
    {{0, 0}, {1, 0}, {0, 1}, {-1, 1}}, // 지그재그2
    {{0, 0}, {0, 1}, {1, 1}, {1, 2}}, // 지그재그2

    {{0, 0}, {0, 1}, {1, 1}, {0, 2}}, // 성1
    {{0, 0}, {1, 0}, {2, 0}, {1, 1}}, // 성2
    {{0, 0}, {0, 1}, {0, 2}, {-1, 1}}, // 성3
    {{0, 0}, {1, 0}, {2, 0}, {1, -1}} // 성4
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    // 입력
    cin >> n >> m;
    for(int i =0 ; i < n; i ++) {
        for(int j = 0 ; j < m; j++) cin >> mp[i][j];
    }

    // 모든 케이스 완전 탐색
    for(int c = 0; c < CASE; c++){
        // 2차원 배열 탐색
        for(int y = 0; y < n; y ++) {
            for(int x = 0; x < m; x++){
                bool validFlag = true;
                int sum = 0;
                for(int b = 0; b < BLOCK_COUNT; b++){
                    int ny = y + coordi[c][b].first;
                    int nx = x + coordi[c][b].second;
                    if(ny >= n || ny < 0 || nx >= m || nx < 0) {
                        validFlag = false;
                        break;
                    }
                    sum += mp[ny][nx];
                }
                if (validFlag) ret = max(sum, ret);
            }
        }
    }
    cout << ret;

    return 0;
}